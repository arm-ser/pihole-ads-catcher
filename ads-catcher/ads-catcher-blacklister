#!/bin/sh
##############################################################################
# PEB <pebdev@lavache.com>
# 2019.03.24
##############################################################################
# Copyright (C) 2019 
# This file is copyright under the latest version of the EUPL.
# Please see https://joinup.ec.europa.eu/collection/eupl for your rights 
# under this license.
##############################################################################

# Log, settings and temporary files
ADSC_TMPFILE=/tmp/ads-catcher.tmp
#ADSC_SETTINGS=/etc/ads-catcher.cfg
PIHOLE_LOGFILE=/var/lib/docker/volumes/dns_var_pihole_log/_data/pihole.log
PIHOLE_BLACKLIST_FILE=/etc/pihole/blacklist.txt


##############################################################################
# @brief : function to read setting from configruation file
# @param $1 : configuration name to read
# @return value of the setting
##############################################################################
#readSetting () {
#
#  # Read value of the wanted seeting
#  echo "`cat $ADSC_SETTINGS | grep $1 | tr -d ' ' | cut -d= -f2`"
#}


##############################################################################
# @brief : function to read parameter from the temporary file
# @param $1 : parameter name to read
# @return value of the setting
##############################################################################
readTmpParameter () {

  # Read value of the wanted parameter
  echo "`cat $ADSC_TMPFILE | grep $1 | cut -d= -f2`"
}


##############################################################################
# @brief : function to write parameter into the temporary file
# @param $1 : parameter name to read
# @param $2 : value of the parameter
##############################################################################
writeTmpParameter () {

  # Argument check
  if [ $# -lt 2 ]; then
    echo "[writeTmpParameter] ERROR, missing argument"
    return 0
  fi

  # Remove previous entry from the file
  sed -i "/$1/d" $ADSC_TMPFILE

  # Write new entry
  echo "$1=$2" >> $ADSC_TMPFILE
}


##############################################################################
# @brief : function to remove whitelisted address from the blacklist file
# @param $1 : strings that contains list of addresses to block
# @param $2 : whitelisted address
##############################################################################
whitelistFiltering () {

  # Argument check
  if [ $# -lt 2 ]; then
    echo "[whitelistFiltering] ERROR, missing argument :"
    return
  fi

  # Parameters
  F5_BLACKLIST_ADDRESSES=$1
  F5_Y1=$2

  F5_Y2="$(echo "$F5_BLACKLIST_ADDRESSES" | sed "/$F5_Y1/d" | awk 'NF' | tr -d ' ' | sort -u)"
  echo "$F5_Y2"
}


##############################################################################
# @brief : function to read pihole log file (only new lines)
# @return : extracted data
##############################################################################
readPiholeMainLogs () {

  # Save last line of each logfiles to parse new log lony next time
  F6_NB_LINES_L0=`cat "$PIHOLE_LOGFILE" | wc -l`
  F6_NB_LINES_L1=`cat "$PIHOLE_LOGFILE.1" | wc -l`
 
  # Read tmp file to keep last line only
  F6_TMP_NB_LINES_L0=$(readTmpParameter "plog0")
  F6_TMP_NB_LINES_L1=$(readTmpParameter "plog1")

  # Check values
  if [ -z "$F6_TMP_NB_LINES_L0" ]; then
    F6_TMP_NB_LINES_L0=1
  fi

  if [ -z "$F6_TMP_NB_LINES_L1" ]; then
    F6_TMP_NB_LINES_L1=1
  fi

  # Check if logs where flushed
  if [ "$F6_NB_LINES_L0" -lt "$F6_TMP_NB_LINES_L0" ]; then
    F6_TMP_NB_LINES_L0=1
  fi

  if [ "$F6_NB_LINES_L1" -lt "$F6_TMP_NB_LINES_L1" ]; then
    F6_TMP_NB_LINES_L1=1
  fi

  # Remove no new lines
  F6_L0=`cat "$PIHOLE_LOGFILE" | sed "$F6_TMP_NB_LINES_L0,$F6_NB_LINES_L0!d"`
  F6_L1=`cat "$PIHOLE_LOGFILE.1" | sed "$F6_TMP_NB_LINES_L1,$F6_NB_LINES_L1!d"`

  # Extract dns request from the pihole logfiles
  F6_L0B=`echo "$F6_L0" | grep query | grep googlevideo.com | sed 's/.*query\[A*]\ //' | sed 's/from\ [a-Az-Z0-9.:]*//' | sort -u`
  F6_L1B=`echo "$F6_L1" | grep query | grep googlevideo.com | sed 's/.*query\[A*]\ //' | sed 's/from\ [a-Az-Z0-9.:]*//' | sort -u`
 
  # Save current number of lines for next extraction
  writeTmpParameter "plog0" "$F6_NB_LINES_L0"
  writeTmpParameter "plog1" "$F6_NB_LINES_L1"

  # Prepare output and return it
  F6_LOG_OUT="$F6_L0B\n$F6_L1B"
  echo "$F6_LOG_OUT"
}


##############################################################################
# @brief : function to read all pihole log files
# @return : extracted data
##############################################################################
readPiholeAllLogs () {

  # Extract dns request from the pihole logfiles
  F8_Y2="$({ gunzip -d $PIHOLE_LOGFILE.*.gz --to-stdout & cat $PIHOLE_LOGFILE $PIHOLE_LOGFILE.1; } 2>/dev/null | awk '$5 ~ /^query/ && $6 ~ /googlevideo\.com$/{print $6}' | sort -u)"

  # Return list of addresses
  echo "$F8_Y2"
}


##############################################################################
# @brief : function to catch youtube ads
# @return 1 if we need to update pihole, otherwise 0
##############################################################################
catcherYoutube () {

  F7_RETVAL=1
  
  # Read logfiles
  if [ "$ADSC_ARGS_READ_ALL_LOGS" -eq 1 ]; then
    F7_Y2=$(readPiholeAllLogs)
  else
    F7_Y2=$(readPiholeMainLogs)
  fi

  # Do a whitelist filtering
  F7_Y2=$(whitelistFiltering "$F7_Y2" "redirector.googlevideo.com")
  F7_Y2=$(whitelistFiltering "$F7_Y2" "manifest.googlevideo.com")

  # Return list of addresses
  echo "$F7_Y2"
}


##############################################################################
# @brief : display help menu and quit
##############################################################################
help () {

  echo "--------------------------------------------------------------------"
  echo "Usage :"
  echo " ads-catcher [-a][â€“h]"
  echo ""
  echo "Options :"
  echo " -a  Read all pihole logs (useful for the first launch)"
  echo " -h  Display this help"
  echo "--------------------------------------------------------------------"
  exit
}


##############################################################################
### MAIN ###
##############################################################################
echo "[`date`] ads-catcher-blacklister"

# Settings
ADSC_ARGS_READ_ALL_LOGS=0

# Create blacklist folder and tmp files to be sure
touch $ADSC_TMPFILE

# Special arguments
while getopts ":ha" opt; do
  case ${opt} in
    h )  help ;;
    a )  ADSC_ARGS_READ_ALL_LOGS=1;;
    \? ) help;;
  esac
done

if [ $ADSC_ARGS_READ_ALL_LOGS -eq 1 ]; then
  echo "Parsing all logfiles ..."
fi

# Call different catchers
RETVAL_YOUTUBE=$(catcherYoutube)

if [ -n "$RETVAL_YOUTUBE" ]; then
  # Update pihole with new entries
  /usr/local/bin/pihole -b $RETVAL_YOUTUBE
fi

